# -------------------------------------------------------
# Importing Libraries
# -------------------------------------------------------
import tpqoa
import sqlite3
import pandas as pd
import datetime as dt
import time

from datetime import datetime
from sqlite3 import Error
from tqdm.auto import tqdm
# -------------------------------------------------------

# -------------------------------------------------------
# SQL Database
# -------------------------------------------------------
class SQLDB:
    def __init__(self, db_name: str):
        """
        :param db_name: The name of the database to create or access.
        """
        self.db_name = db_name

        try:
            self.con = sqlite3.connect(self.db_name)
            print("Connection established: " + self.db_name)

        except Error:
            print("Connection failed: " + self.db_name)
            print(Error)

        self.cursor = self.con.cursor()

        try:
            print('\n'+"Tables Available to Query from " + self.db_name + ":")
            print(self.cursor.execute("""SELECT name FROM sqlite_master WHERE type='table';""").fetchall(), '\n')

        except sqlite3.Error as error:
            print("Failed to execute the above query", error)

    def df_to_table(self, df: pd.DataFrame or pd.Series, table_name: str):
        """
        :param df: pd.DataFrame to save into SQL database.
        :param table_name: name to save table in SQL database.
        :return: SQL database saved to directory.
        """
        print("Adding " + table_name + " in " + self.db_name)
        df.to_sql(name=table_name, con=self.con, if_exists='replace')
        self.con.commit()
        self.con.close()
        print("Connection closed: " + self.db_name, '\n')

    def update_db(self, df: pd.DataFrame or pd.Series, table_name: str):
        """
        :param df: pd.DataFrame to update existing SQL table.
        :param table_name: name to save table in SQL database.
        :return: SQL database updated with new files.
        """

        print("Updating " + table_name + " in " + self.db_name)
        df.to_sql(name=table_name, con=self.con, if_exists='append')
        self.con.commit()
        self.con.close()
        print("Connection closed: " + self.db_name, '\n')

    def table_to_df(self, table_name: str):
        """
        :param table_name: name of table in SQL database.
        :return: pd.DataFrame of data from table in SQL db.
        """
        print('Importing ' + table_name + ' From ' + self.db_name)
        df = pd.read_sql("SELECT * FROM " + table_name, self.con)
        self.con.close()
        print("Connection Closed: " + self.db_name, '\n')
        return df

    def query_db(self, query: str):
        """
        :param query: an sql query in string format
        :return: an SQL query into a pd.DataFrame.
        """

        try:
            return pd.read_sql_query(query, self.con)

        except Error:
            print("Failed to execute the above query", Error)
    

# -------------------------------------------------------

# -------------------------------------------------------
# API Call Class
# -------------------------------------------------------
class APIData:    
    def __init__(self, granularity, start_date):
        """
        Sets the start date, end date and candle frequency to download.
        """
        # Start Date
        self.start_date = datetime.strptime(start_date, '%Y-%m-%d')

        # End Date
        self.end_date = datetime.now()

        # Candle Frequency
        self.granularity = granularity

        print("Model Frequency = " + self.granularity + '\n')
        print('<<<<<< Calling API >>>>>>')
        self.api = tpqoa.tpqoa("oanda.cfg")
        # print(self.api.account_type, " | ", self.api.account_id)

        # List the available instruments and save to db
        print('\n'+'######  Calling SQL DB  ######')
        self.inst = pd.DataFrame(self.api.get_instruments()).pop(1)
        SQLDB('Forex_db').df_to_table(self.inst, 'instruments')
        
        # Setting the maximum look-back period based on the frequency
        max_candle = None
        
        if self.granularity == 'D':
            max_candle = 5000
        if self.granularity == 'H12':
            max_candle = 2500
        if self.granularity == 'H8':
            max_candle = 1658
        if self.granularity == 'H6':
            max_candle = 1250
        if self.granularity == 'H4':
            max_candle = 832
        if self.granularity == 'H3':
            max_candle = 625
        if self.granularity == 'H2':
            max_candle = 416
        if self.granularity == 'H1':
            max_candle = 208
        if self.granularity == 'M30':
            max_candle = 208
        if self.granularity == 'M15':
            max_candle = 208
        if self.granularity == 'M10':
            max_candle = 208
        if self.granularity == 'M5':
            max_candle = 208
        if self.granularity == 'M1':
            max_candle = 208

        # api maximum period for this frequency:
        delta = dt.timedelta(days=max_candle)

        # Iterating from start date, recording date ranges of days
        self.date_ranges = []
        temp_start_date = self.start_date

        while temp_start_date < self.end_date:
            temp_end_date = temp_start_date + delta

            if temp_end_date > self.end_date:
                temp_end_date = self.end_date

            self.date_ranges.append([temp_start_date, temp_end_date])
            temp_start_date = temp_end_date + dt.timedelta(days=1)
    
    def get_instrument(self, ticker: str, price: str):
        """
        :param ticker: string of instrument EUR_USD, GBP_JPY
        :param price: string of 'A' = ask price; 'B' = bid price
        :return: pd.DateFrame of OHLCV instrument data.
        """

        s_price = None
        if price == 'A':
            s_price = '_Ask'
        elif price == 'B':
            s_price = '_Bid'
        print('Downloading ' + ticker + s_price)

        tables = []

        # For each date range, pass dates into API
        for start_dt, end_dt in tqdm(self.date_ranges):
            start = start_dt.strftime("%Y-%m-%dT00:00")
            end = end_dt.strftime("%Y-%m-%dT%H")
            try:
                item = self.api.get_history(instrument=ticker,
                                            start=start,
                                            end=end,
                                            granularity=self.granularity,
                                            price=price)

                tables.append(item)
                time.sleep(1)
            except Exception as exception_:
                print("An Error has occurred: ", exception_)
                pass

        single_df = pd.concat(tables)
        
        # Format and set column index's and name
        single_df.drop('complete', axis=1, inplace=True)
        single_df.reset_index(inplace=True)
        single_df.rename(
            columns={'time': 'DateTime', 
                     'o': ticker + '_' + 'Open', 
                     'h': ticker + '_' + 'High', 
                     'l': ticker + '_' + 'Low',
                     'c': ticker + '_' + 'Close', 
                     'volume': ticker + '_' + 'Volume'}, inplace=True)
        single_df.set_index(['DateTime'], inplace=True)

        # Puts instrument name as table header in another level
        # single_df.columns = pd.MultiIndex.from_product([[ticker], single_df.columns])
        
        
        return single_df
        
        
    def all_instruments(self):
        """
        Downloads all OANDA instruments and places into a bid and ask dataframe.  
        """
        print('Searching from: ', self.start_date, ' | ', self.end_date, ' at a frequency of:', self.granularity)
        print('<<<<<< Downloading Instrument Database >>>>>>')
        ask = []
        bid = []
        for i in range(len(self.inst)):
            askdf = self.get_instrument(self.inst[i], "A")
            ask.append(askdf)
            biddf = self.get_instrument(self.inst[i], "B")
            bid.append(biddf)

        ask = pd.concat(ask, axis=1)
        bid = pd.concat(bid, axis=1)
        print('<<<<<< Download Complete >>>>>>')

        return ask, bid
    
    
    def __update_instrument(self, df: pd.DataFrame, ticker: str, price: str):
        """
        Update database with current OHLCV.
        :param df: Existing pd.DataFrame with OHLCV to update.
        :param ticker: string of instrument EUR_USD, GBP_JPY.
        :param price: string of 'A' = ask price; 'B' = bid price.
        :return: pd.DateFrame of updated OHLCV instrument data.
        """
        s_price = None
        if price == 'A':
            s_price = '_Ask'
        elif price == 'B':
            s_price = '_Bid'
        
        # Check using existing database and current datetime 
        dt_now = dt.datetime.strptime(datetime.now().strftime("%Y-%m-%d %H:00"), '%Y-%m-%d %H:00')
        dt_df =  dt.datetime.strptime(df.index[-1], '%Y-%m-%d %H:00:00')
        check = dt_now - dt_df 

        if check > dt.timedelta(hours=df.index[1]-df.index[0]): 
            try:
                print('Updating ' + ticker + s_price)
                df_update = self.api.get_history(instrument=ticker,
                                                 start=df.index[-1],
                                                 end=datetime.now().strftime("%Y-%m-%d %H:00"),
                                                 granularity=self.granularity,
                                                 price=price)
                
                # Format and set column index's and name
                df_update.drop('complete', axis=1, inplace=True)
                df_update.reset_index(inplace=True)
                df_update.rename(columns={'time': 'DateTime', 
                                          'o': ticker + '_' + 'Open', 
                                          'h': ticker + '_' + 'High', 
                                          'l': ticker + '_' + 'Low',
                                          'c': ticker + '_' + 'Close', 
                                          'volume': ticker + '_' + 'Volume'}, inplace=True)
                df_update.set_index(['DateTime'], inplace=True)
                
                return df_update.drop(df_update.index[0])

            except Exception as exception_:
                print("An Error has occurred: ", exception_)
        
        else: 
            print('No Updates to be Downloaded for: ' + ticker + s_price)
            pass
            
    def update_instruments(self, df: pd.DataFrame):
        """
        Update database to most recent datetime. 
        :param df: Existing pd.DataFrame with OHLCV to update.
        :return: pd.DateFrame of every instrument OHLCV data updated.
        """
        print('<<<<<< Updating Instrument Database >>>>>>')
        ask = []
        bid = []
        for i in tqdm(range(len(self.inst))):
            askdf = self.__update_instrument(df, self.inst[i], "A")
            ask.append(askdf)
            biddf = self.__update_instrument(df, self.inst[i], "B")
            bid.append(biddf)
        
        try: 
            ask = pd.concat(ask, axis=1)
            bid = pd.concat(bid, axis=1)
        
        except: pass
        
        print('<<<<<< Update Complete >>>>>>')

        return ask, bid
       

# -------------------------------------------------------

if __name__ == '__main__':
    model_1D = APIData('D', '2010-1-1')
    
    # Download all instruments
    ask_1D, bid_1D = model_1D.all_instruments()
    SQLDB('Forex_db').df_to_table(ask_1D, 'D1_todo_market_ask')
    SQLDB('Forex_db').df_to_table(bid_1D, 'D1_todo_market_bid')
    
    # Update existing database
    ask_1D_update, bid_1D_update = model_1D.update_instruments(ask_1D)
    SQLDB('Forex_db').update_db(ask_1D_update, 'D1_todo_market_ask')
    SQLDB('Forex_db').update_db(bid_1D_update, 'D1_todo_market_bid')
